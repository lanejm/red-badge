[{"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/index.tsx":"1","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/reportWebVitals.ts":"2","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/App.tsx":"3","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Navbar/Navbar.tsx":"4","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Navbar/Logout/Logout.tsx":"5","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Auth/Auth.tsx":"6","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Edit.tsx":"7","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Search.tsx":"8","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Auth/LoginRegister/SignUpForm.tsx":"9","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Items.tsx":"10","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/List.tsx":"11","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Create.tsx":"12"},{"size":547,"mtime":1608084933721,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1607641547906,"results":"15","hashOfConfig":"14"},{"size":4334,"mtime":1610504590417,"results":"16","hashOfConfig":"14"},{"size":2163,"mtime":1610503578550,"results":"17","hashOfConfig":"14"},{"size":1042,"mtime":1610504523462,"results":"18","hashOfConfig":"14"},{"size":6902,"mtime":1610504397559,"results":"19","hashOfConfig":"14"},{"size":4518,"mtime":1609453622682,"results":"20","hashOfConfig":"14"},{"size":989,"mtime":1610500598480,"results":"21","hashOfConfig":"14"},{"size":4956,"mtime":1609890420728,"results":"22","hashOfConfig":"14"},{"size":4268,"mtime":1610328401560,"results":"23","hashOfConfig":"14"},{"size":1692,"mtime":1609891624640,"results":"24","hashOfConfig":"14"},{"size":8292,"mtime":1610497383086,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"u2ilh1",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"28"},"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/index.tsx",[],["57","58"],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/reportWebVitals.ts",[],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/App.tsx",["59"],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Navbar/Navbar.tsx",["60"],"import React, { useState } from 'react';\nimport Logout from './Logout/Logout';\nimport { Link } from 'react-router-dom';\nimport { Collapse, Navbar, NavbarToggler, Nav, NavItem, NavLink, Button } from 'reactstrap';\n// import './Navbar.css';\n\ninterface NavProps {\n  isLoggedIn: boolean;\n  clearToken: any;\n}\ninterface NavState {\n  collapsed: boolean;\n  clearToken: any;\n  isLoggedIn: boolean;\n}\n\nclass NavFile extends React.Component<NavProps, NavState> {\n  constructor(props: NavProps) {\n    super(props);\n    this.state = {\n      collapsed: true,\n      isLoggedIn: false,\n      clearToken: () => {\n        this.setState({\n          isLoggedIn: false\n        })\n      }\n    }\n  }\n\n  toggleNavbar = () => {\n    this.setState({ collapsed: !this.state.collapsed })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"faced\" light>\n          <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n          <Collapse isOpen={!this.state.collapsed} navbar>\n            <Nav navbar>\n              <NavItem>\n                <Link to=\"/create\"><Button clasName=\"navButtons\" color=\"success\">Create Gift Entry</Button></Link>\n              </NavItem>\n              <NavItem>\n                <NavLink><Logout clearToken={this.props.clearToken} />\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    )\n  };\n}\n\nexport default NavFile;\n\n\n// const NavFile = (props: any) => {\n//     const [collapsed, setCollapsed] = useState(true);\n//     const toggleNavbar = () => setCollapsed(!collapsed);\n\n// return (\n//   <div>\n//     <Navbar color=\"faded\" light>\n//       <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\n//       <Collapse isOpen={!collapsed} navbar>\n//         <Nav navbar>\n//           <NavItem>\n//             <Link to=\"/create\"><Button className=\"navButtons\" color='success'>Create Gift Entry</Button></Link>\n//           </NavItem>\n//           <NavItem>\n//             <NavLink > <Logout clearToken={props.clearToken} /></NavLink>\n//           </NavItem>\n//         </Nav>\n//       </Collapse>\n//     </Navbar>\n//   </div>\n// );\n// }\n\n// export default NavFile","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Navbar/Logout/Logout.tsx",[],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Auth/Auth.tsx",["61","62"],"import React, { useState } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Button } from 'reactstrap'\n\n//change to class component\n\n\ninterface AuthProp {\n    // firstName: string;\n    // lastName: string;\n    // email: string;\n    // password: string;\n    // login: boolean;\n    updateToken: (newToken: string, id: any) => void;\n    // e: any;\n}\n\ninterface AuthState {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n    login: boolean;\n    sessionToken: string;\n    userId: string;\n    isLoggedIn: boolean;\n    clearToken: any;\n    updateToken: string;\n}\n\nclass Auth extends React.Component<AuthProp, AuthState> {\n    constructor(props: AuthProp) {\n        super(props)\n        this.state = {\n            firstName: '',\n            lastName: '',\n            email: '',\n            password: '',\n            login: false,\n            sessionToken: '',\n            updateToken: '',\n            userId: 'userId',\n            isLoggedIn: false,\n            clearToken: () => {\n                this.setState({\n                    isLoggedIn: false\n                })\n            }\n        }\n    }\n\n    loginToggle = () => {\n        this.setState({ login: !this.state.login })\n    }\n\n    updateToken = (newToken: any, id: any) => {\n        localStorage.setItem('id', id)\n        localStorage.setItem('token', newToken)\n        this.setState({ sessionToken: newToken, userId: id, isLoggedIn: true })\n    }\n\n    handleSubmit = (e: any) => {\n        e.preventDefault()\n        const url = `http://localhost:8081/user/${this.state.login ? 'login' : 'register'}`\n        const body = {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            email: this.state.email,\n            password: this.state.password\n        }\n        if (this.state.password.length > 8) {\n            fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(body)\n            }).then(r => r.json())\n                .then(rObj => this.updateToken(rObj.sessionToken, rObj.user.id))\n                // this.setState({isLoggedIn:true})\n        } else {\n            window.alert(\"Password must be at least 8 characters\")\n        }\n    }\n\n\n    signupFields = () => {\n        if (this.state.login) {\n            return null\n        } else {\n            return (\n                <div>\n                    <label htmlFor=\"firstName\">First Name</label>\n                    <br />\n                    <input id=\"firstName\" value={this.state.firstName} onChange={e => this.setState({ firstName: e.target.value })} />\n                    <br />\n                    <label htmlFor=\"lastName\">Last Name</label>\n                    <br />\n                    <input id=\"lastName\" value={this.state.lastName} onChange={e => this.setState({ lastName: e.target.value })} />\n                </div>\n            )\n        }\n    }\n    render() {\n        return (\n            <div>\n                <form>\n                    <h1>{this.state.login ? 'Login' : 'Register'}</h1>\n                    <label htmlFor=\"email\">Email</label>\n                    <br />\n                    <input id=\"email\" value={this.state.email} onChange={e => this.setState({ email: e.target.value })} />\n                    <br />\n                    <label htmlFor=\"password\">Password</label>\n                    <br />\n                    <input type=\"password\" id=\"password\" value={this.state.password} onChange={e => this.setState({ password: e.target.value })} />\n                    <br />\n                    {this.signupFields()}\n                    <br />\n                    <Button type='button'\n                        onClick={this.loginToggle}\n                    >\n                        {this.state.login ? \"Click Here to Register\" : \"Click Here to Login\"}\n                    </Button>\n                    <Button onClick={(e: any) => this.handleSubmit(e)} type='submit'>Submit</Button>\n\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Auth;\n\n\n// const Auth = (props: any) => {\n\n//     const [firstName, setFirstName] = useState('')\n//     const [lastName, setLastName] = useState('')\n//     const [email, setEmail] = useState('')\n//     const [password, setPassword] = useState('')\n\n//     const [login, setLogin] = useState(true)\n\n//     const loginToggle = () => {\n//         setLogin(!login)\n//     }\n\n//     const handleSubmit = (e: any) => {\n//         e.preventDefault()\n//         const url = `http://localhost:8081/user/${login ? 'login' : 'register'}`\n//         const body = {\n//             firstName: firstName,\n//             lastName: lastName,\n//             email: email,\n//             password: password\n//         }\n//         if (password.length > 8) {\n//             fetch(url, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify(body)\n//             }).then(r => r.json())\n//                 .then(rObj => props.updateToken(rObj.sessionToken, rObj.user.id))\n//         } else {\n//             window.alert(\"Password must be at least 8 characters\")\n//         }\n//     }\n\n\n//     const signupFields = () => {\n//         if (login) {\n//             return null\n//         } else {\n//             return (\n//                 <div>\n//                     <label htmlFor=\"firstName\">First Name</label>\n//                     <br />\n//                     <input id=\"firstName\" value={firstName} onChange={e => setFirstName(e.target.value)} />\n//                     <br />\n//                     <label htmlFor=\"lastName\">Last Name</label>\n//                     <br />\n//                     <input id=\"lastName\" value={lastName} onChange={e => setLastName(e.target.value)} />\n//                 </div>\n//             )\n//         }\n//     }\n\n//     return (\n//         <form>\n//             <h1>{login ? 'Login' : 'Register'}</h1>\n//             <label htmlFor=\"email\">Email</label>\n//             <br />\n//             <input id=\"email\" value={email} onChange={e => setEmail(e.target.value)} />\n//             <br />\n//             <label htmlFor=\"password\">Password</label>\n//             <br />\n//             <input type=\"password\" id=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n//             <br />\n//             {signupFields()}\n//             <br />\n//             <Button type='button' onClick={loginToggle}>\n//                 {login ? \"Click Here to Register\" : \"Click Here to Login\"}\n//             </Button>\n//             <Button onClick={handleSubmit} type='submit'>Submit</Button>\n//         </form>\n//     )\n// }\n\n// export default Auth\n\n//reactstrap form?\n\n//login is not showing gift list based on id.","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Edit.tsx",[],["63","64"],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Search.tsx",["65"],"import * as React from 'react';\nimport { Component } from 'react';\n\nexport interface SearchProps {\n    giftName?: string;\n}\n\nexport interface SearchState {\n    giftName?: string;\n    setGiftsName: []\n}\n\nclass Search extends React.Component<SearchProps, SearchState> {\n    constructor(props: SearchProps) {\n        super(props);\n        this.state = {\n            giftName: 'gift',\n            setGiftsName: []\n\n        };\n    }\n\n        fetchGiftsName = () => {\n            fetch(`http://localhost:8081/gifts/${this.props.giftName}`, {\n                method: 'GET'\n            }).then(r => r.json())\n                .then(rArr => {\n                    this.setState({\n                        setGiftsName: rArr\n                    })\n                    // console.log(this.state.setGifts)\n                })\n\n        }\n\n        componentDidMount() {\n            this.fetchGiftsName()\n        }\n        render() {\n            return (\n                <div>\n                    {this.props.giftName}\n                </div>\n            );\n        }\n    }\n\n    export default Search;",["66","67"],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Auth/LoginRegister/SignUpForm.tsx",["68"],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Items.tsx",[],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/List.tsx",["69","70","71","72","73","74","75","76","77","78"],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Create.tsx",["79","80","81"],"import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport '../Gifts/create.css'\nimport GiftsList from './List';\n\ninterface GiftCreateProp {\n    giftName: string;\n    description: string;\n    date: string;\n    purchased: string;\n    person: string;\n    from: string;\n    owner: string;\n    price: string;\n    sessionToken: string;\n    \n}\n\ninterface GiftCreateState {\n    giftName: string;\n    description: string;\n    date: string;\n    purchased: string;\n    person: string;\n    from: string;\n    owner: string;\n    price: string;\n    sessionToken: string;\n    setGifts: [];\n    userId: string;\n    modal: boolean;\n    toggle: boolean\n}\n\ninterface ModalProps {\n    isShown: boolean;\n    hide: () => void;\n    modalContent: JSX.Element;\n    headerText: string;\n}\n\n//make this like items class\nclass GiftsCreate extends React.Component<GiftCreateProp, GiftCreateState> {\n    constructor(props: GiftCreateProp) {\n        super(props)\n        this.state = {\n            giftName: 'gift',\n            description: 'description',\n            date: 'date',\n            purchased: 'purchased',\n            person: 'person',\n            from: 'from',\n            owner: 'owner',\n            price: 'price',\n            sessionToken: 'sessionToken',\n            userId: 'userId',\n            setGifts: [],\n            modal: false,\n            toggle: true\n        }\n       \n    }\n    // resetForm() {\n    //     this.setState = {\n    //         giftName: (null),\n    //         description: ('null')\n    //     }\n    // }\n\n    fetchGifts = () => {\n        fetch(`http://localhost:8081/gifts`, {\n            method: 'GET'\n        }).then(r => r.json())\n            .then(rArr => {\n                this.setState({\n                    setGifts: rArr\n                })\n            })\n    }\n    handleSubmit = (e: GiftCreateProp) => {\n        const body = {\n            giftName: 'Gift',\n            description: 'description',\n            date: 'date',\n            purchased: 'purchased',\n            person: 'person',\n            from: 'from',\n            owner: 'owner',\n            price: 'price',\n            sessionToken: 'sessionToken',\n        }\n        fetch('http://localhost:8081/gifts/create', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            },\n            // figure out how to get dynamic sessionToken\n            body: JSON.stringify(body)\n        }).then(r => r.json())\n            .then(rObj => {\n                console.log(rObj)\n                // this.resetForm()\n                // history.push('/')\n                this.fetchGifts()\n            })\n    }\n\n   componentDidMount() {\n       ontoggle = () => (!Modal)\n   }\n\n\n    render() {\n        return (\n            <div>\n                <Button color=\"success\" onclick={ontoggle}>Launch Modal</Button>\n                <Modal isOpen={this.state.modal} onclick={this.state.toggle} >\n                    <ModalHeader MouseEvent={this.state.toggle}>Create Gift</ModalHeader>\n                    <ModalBody>\n                        <form id='createGift' className='createGift'>\n                            <label htmlFor='giftName'>Gift Name: </label>\n                            <input placeholder='Ex: Necktie' id='giftName' value={this.props.giftName} onChange={e => this.state.giftName} required />\n                            <br />\n                            <label htmlFor='description'>Description: </label>\n                            <input placeholder='Write a brief description' id='description' value={this.props.description} onChange={e => this.state.description} />\n                            <br />\n                            <label htmlFor='date'>Date: </label>\n                            <input placeholder='Ex: 12/25/2020' id='date' value={this.props.date} onChange={e => this.state.date} required />\n                            <br />\n                            <label htmlFor='purchased'>Purchased: </label>\n                            <input placeholder='Where was this purchased?' id='purchased' value={this.props.purchased} onChange={e => this.state.purchased} />\n                            <br />\n                            <label htmlFor='person'>Person: </label>\n                            <input placeholder='Who was this for?' id='person' value={this.props.person} onChange={e => this.state.person} required />\n                            <br />\n                            <label htmlFor='from'>From: </label>\n                            <input placeholder='Who was this from?' id='from' value={this.props.from} onChange={e => this.state.from} required />\n                            <br />\n                            <label htmlFor='owner'>Owner: </label>\n                            <input placeholder='Onwer of List' id='owner' value={this.props.owner} onChange={e => this.state.owner} required />\n                            <br />\n                            <label htmlFor='price'>Price: </label>\n                            <input placeholder='Ex: $200' id='price' value={this.props.price} onChange={e => this.state.price} required />\n                        </form>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color='secondary' style={{ marginLeft: '20px' }} id='resetForm'  type='button'>Reset Gift Form</Button>\n                        <Button color='success' style={{ marginLeft: '15px' }} id=\"submitGift\" type=\"submit\" >Submit Gift!</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        )\n    }\n        /* // return (\n        //     <div>\n                <form id='createGift' className='createGift'>\n                    <label htmlFor='giftName'>Gift Name: </label>\n                    <input placeholder='Ex: Necktie' id='giftName' value={this.giftName} onChange={e => this.state.giftName(e.target.value)} required />\n                    <br />\n                    <label htmlFor='description'>Description: </label>\n                    <input placeholder='Write a brief description' id='description' value={description} onChange={e => setDescription(e.target.value)} />\n                    <br />\n                    <label htmlFor='date'>Date: </label>\n                    <input placeholder='Ex: 12/25/2020' id='date' value={date} onChange={e => setDate(e.target.value)} required />\n                    <br />\n                    <label htmlFor='purchased'>Purchased: </label>\n                    <input placeholder='Where was this purchased?' id='purchased' value={purchased} onChange={e => setPurchased(e.target.value)} />\n                    <br />\n                    <label htmlFor='person'>Person: </label>\n                    <input placeholder='Who was this for?' id='person' value={person} onChange={e => setPerson(e.target.value)} required />\n                    <br />\n                    <label htmlFor='from'>From: </label>\n                    <input placeholder='Who was this from?' id='from' value={from} onChange={e => setFrom(e.target.value)} required />\n                    <br />\n                    <label htmlFor='owner'>Owner: </label>\n                    <input placeholder='Onwer of List' id='owner' value={owner} onChange={e => setOwner(e.target.value)} required />\n                    <br />\n                    <label htmlFor='price'>Price: </label>\n                    <input placeholder='Ex: $200' id='price' value={price} onChange={e => setPrice(e.target.value)} required />\n        //             <br />\n        //             <Button color='secondary' style={{ marginLeft: '20px' }} id='resetForm' onClick={this.resetForm} type='button'>Reset Gift Form</Button>\n        //             <Button color='success' style={{ marginLeft: '15px' }} id=\"submitGift\" onClick={this.handleSubmit} type=\"submit\" >Submit Gift!</Button>\n        //             {/* <Alert color=\"success\">Gift submitted!</Alert> */\n            /* //         </form> */\n            /* //         <br />\n            //     </div > */\n\n\n}\n\n    export default GiftsCreate\n\n//make this a modal? \n//notes entry\n//alert when gift submitted?\n//styling for input fields.",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":7,"column":8,"nodeType":"88","messageId":"89","endLine":7,"endColumn":14},{"ruleId":"86","severity":1,"message":"90","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":25},{"ruleId":"86","severity":1,"message":"90","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":25},{"ruleId":"86","severity":1,"message":"91","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":18},{"ruleId":"82","replacedBy":"92"},{"ruleId":"84","replacedBy":"93"},{"ruleId":"86","severity":1,"message":"94","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":19},{"ruleId":"82","replacedBy":"95"},{"ruleId":"84","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":135,"column":21,"nodeType":"99","endLine":135,"endColumn":32},{"ruleId":"86","severity":1,"message":"100","line":19,"column":12,"nodeType":"88","messageId":"89","endLine":19,"endColumn":17},{"ruleId":"86","severity":1,"message":"101","line":20,"column":22,"nodeType":"88","messageId":"89","endLine":20,"endColumn":33},{"ruleId":"86","severity":1,"message":"102","line":21,"column":25,"nodeType":"88","messageId":"89","endLine":21,"endColumn":39},{"ruleId":"86","severity":1,"message":"103","line":22,"column":18,"nodeType":"88","messageId":"89","endLine":22,"endColumn":25},{"ruleId":"86","severity":1,"message":"104","line":23,"column":23,"nodeType":"88","messageId":"89","endLine":23,"endColumn":35},{"ruleId":"86","severity":1,"message":"105","line":24,"column":20,"nodeType":"88","messageId":"89","endLine":24,"endColumn":29},{"ruleId":"86","severity":1,"message":"106","line":25,"column":18,"nodeType":"88","messageId":"89","endLine":25,"endColumn":25},{"ruleId":"86","severity":1,"message":"107","line":26,"column":19,"nodeType":"88","messageId":"89","endLine":26,"endColumn":27},{"ruleId":"86","severity":1,"message":"108","line":27,"column":19,"nodeType":"88","messageId":"89","endLine":27,"endColumn":27},{"ruleId":"86","severity":1,"message":"109","line":28,"column":26,"nodeType":"88","messageId":"89","endLine":28,"endColumn":41},{"ruleId":"86","severity":1,"message":"110","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":20},{"ruleId":"86","severity":1,"message":"111","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":17},{"ruleId":"86","severity":1,"message":"112","line":36,"column":11,"nodeType":"88","messageId":"89","endLine":36,"endColumn":21},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"@typescript-eslint/no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Redirect' is defined but never used.",["113"],["114"],"'Component' is defined but never used.",["113"],["114"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'gifts' is assigned a value but never used.","'setGiftName' is assigned a value but never used.","'setDescription' is assigned a value but never used.","'setDate' is assigned a value but never used.","'setPurchased' is assigned a value but never used.","'setPerson' is assigned a value but never used.","'setFrom' is assigned a value but never used.","'setOwner' is assigned a value but never used.","'setPrice' is assigned a value but never used.","'setSessionToken' is assigned a value but never used.","'useHistory' is defined but never used.","'GiftsList' is defined but never used.","'ModalProps' is defined but never used.","no-global-assign","no-unsafe-negation"]