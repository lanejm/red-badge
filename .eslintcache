[{"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/index.tsx":"1","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/reportWebVitals.ts":"2","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/App.tsx":"3","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Navbar/Navbar.tsx":"4","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Navbar/Logout/Logout.tsx":"5","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Auth/Auth.tsx":"6","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Edit.tsx":"7","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Search.tsx":"8","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Auth/LoginRegister/SignUpForm.tsx":"9","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Items.tsx":"10","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/List.tsx":"11","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Create.tsx":"12"},{"size":547,"mtime":1608084933721,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1607641547906,"results":"15","hashOfConfig":"14"},{"size":6051,"mtime":1610825272391,"results":"16","hashOfConfig":"14"},{"size":2198,"mtime":1610672950467,"results":"17","hashOfConfig":"14"},{"size":1116,"mtime":1610670952808,"results":"18","hashOfConfig":"14"},{"size":7060,"mtime":1610670713572,"results":"19","hashOfConfig":"14"},{"size":8859,"mtime":1611000635535,"results":"20","hashOfConfig":"14"},{"size":989,"mtime":1610500598480,"results":"21","hashOfConfig":"14"},{"size":4956,"mtime":1609890420728,"results":"22","hashOfConfig":"14"},{"size":5656,"mtime":1611000048954,"results":"23","hashOfConfig":"14"},{"size":1692,"mtime":1609891624640,"results":"24","hashOfConfig":"14"},{"size":8227,"mtime":1610818614894,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"u2ilh1",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"28"},"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/index.tsx",[],["56","57"],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/reportWebVitals.ts",[],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/App.tsx",["58","59","60","61","62","63"],"import React from 'react';\nimport './App.css';\nimport Auth from './components/Auth/Auth';\nimport NavFile from './components/Navbar/Navbar';\nimport GiftsCreate from './components/Gifts/Create';\n// import GiftsList from './components/Gifts/List';\nimport Search from './components/Gifts/Search';\nimport { Switch, BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { Button } from 'reactstrap';\nimport ItemsTable from './components/Gifts/Items';\nimport Logout from './components/Navbar/Logout/Logout';\nimport GiftEdit from './components/Gifts/Edit';\n\n\ninterface State {\n  giftName: string;\n  description: string;\n  date: string;\n  purchased: string;\n  person: string;\n  from: string;\n  owner: string;\n  price: string;\n  sessionToken: string;\n  setGifts: [];\n  userId: string;\n  updateToken: string;\n  isLoggedIn: boolean;\n  clearToken: any;\n  setIsLoggedIn: (e: any) => void;\n  showCreate: boolean;\n  setShowCreate: (e: any) => void;\n  setShowEdit: (e:any) => void;\n  showEdit: boolean;\n}\n\n// const clearToken = () => {\n//   userId('')\n//   sessionToken('')\n//   localStorage.clear()\n// }\n\n// const updateToken = (newToken: string, id: any) => {\n//   sessionToken(newToken)\n//   userId(id)\n//   localStorage.setItem('id', id)\n//   localStorage.setItem('token', newToken)\n// }\n\n\nclass App extends React.Component<{}, State> {\n  constructor(props: {}) {\n    super(props)\n    this.state = {\n      giftName: '',\n      description: '',\n      date: '',\n      purchased: '',\n      person: '',\n      from: '',\n      owner: '',\n      price: '',\n      sessionToken: '',\n      userId: '',\n      setGifts: [],\n      isLoggedIn: false,\n      updateToken: '',\n      clearToken: () => {\n        this.setState({\n          isLoggedIn: false\n        })\n      },\n      setIsLoggedIn: (e) => {\n        this.setState({\n          isLoggedIn: e\n        })\n      },\n      showCreate: false,\n      setShowCreate: (e) => {\n        this.setState({\n          showCreate: e\n        })\n      },\n      showEdit :false,\n      setShowEdit: (e) => {\n        this.setState({\n          showEdit: e\n        })\n      }\n    }\n  }\n\n  handleSearch = (e: any) => {\n    fetch(`http://localhost:8081/gifts/${this.state.giftName}`, {\n      method: 'GET',\n    })\n      .then(r => r.json())\n      .then(rArr => {\n        this.setState({\n          setGifts: rArr\n        })\n      })\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('token')) {\n      this.setState({\n        isLoggedIn: true\n      })\n    }\n  }\n\n  clearToken() {\n    this.setState({\n      isLoggedIn: false\n    })\n    console.log(\"test of clear token\")\n    localStorage.clear()\n  }\n\n  updateToken = (newToken: string, id: any) => {\n    this.setState({ sessionToken: newToken, userId: id, isLoggedIn: true })\n    localStorage.setItem('id', id)\n    localStorage.setItem('token', newToken)\n  }\n  fetchGifts = () => {\n    fetch(`http://localhost:8081/gifts/${localStorage.getItem('id')}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': this.state.sessionToken\n      }\n    }).then(r => r.json())\n      .then(rArr => {\n        this.setState({\n          setGifts: rArr\n        })\n        console.log(this.state.setGifts)\n      })\n\n  }\n\n\n  // this.componentDidMount() {\n  //   const token = localStorage.getItem('token')\n  //   if (token) {\n  //     this.state.sessionToken\n  //     // setUserId(parseInt(localStorage.getItem('id')))  //parseInt makes user id an integer\n  //   }\n  // handleSearch() //outside of if statement so code is running\n  render() {\n    return (\n      <div className='App' >\n        <Router>\n          <Switch>\n            <NavFile\n              clearToken={this.state.clearToken}\n              isLoggedIn={this.state.isLoggedIn}\n              setShowCreate={this.state.setShowCreate}\n\n            />\n\n            {/* <Logout \n              clearToken={this.state.clearToken}/> */}\n            {/* <Route exact path=\"/create\"> */}\n\n            {/* </Route> */}\n          </Switch>\n          <GiftsCreate\n            fetchGifts={this.fetchGifts}\n            showCreate={this.state.showCreate}\n            setShowCreate={this.state.setShowCreate}\n            giftName={this.state.giftName}\n            description={this.state.description}\n            date={this.state.date}\n            purchased={this.state.purchased}\n            person={this.state.person}\n            from={this.state.from}\n            owner={this.state.owner}\n            price={this.state.price}\n            sessionToken={this.state.sessionToken} />\n\n          {/* <Auth updateToken={this.updateToken} />  */}\n          {this.state.isLoggedIn === false ? <Auth\n            setIsLoggedIn={this.state.setIsLoggedIn}\n            updateToken={this.updateToken} /> : null}\n          {/* <Button onClick={() => { this.setState({ isLoggedIn: true }) }}>Test</Button> */}\n          {/* <input placeholder='Ex: gift name' id=\"searchBar\" value={this.state.giftName} onChange={e => this.handleSearch(e)}></input>\n          <br />\n          <Button id='search' onClick={this.handleSearch}>Search</Button> */}\n          {this.state.isLoggedIn ?\n            <ItemsTable\n              setShowEdit={this.state.setShowEdit}\n              description={this.state.description}\n              date={this.state.date}\n              purchased={this.state.purchased}\n              from={this.state.from}\n              price={this.state.price}\n              person={this.state.person}\n              fetchGifts={this.fetchGifts}\n              setGifts={this.state.setGifts}\n              isLoggedIn={this.state.isLoggedIn}\n              giftName={this.state.giftName}\n              owner={this.state.owner}\n              sessionToken={this.state.sessionToken}\n              userId={this.state.userId} />\n            : null\n          }\n\n          {/* <Search /> */}\n\n          <br />\n          {/* <GiftsList userId={userId} fetchGifts={fetchGifts} gifts={gifts} /> */}\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n//add in \"reviews.js\" file\n//search not working. ","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Navbar/Navbar.tsx",[],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Navbar/Logout/Logout.tsx",[],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Auth/Auth.tsx",["64","65"],"import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Button } from 'reactstrap'\nimport Logout from '../Navbar/Logout/Logout';\n\n//change to class component\n\n\ninterface AuthProp {\n    // firstName: string;\n    // lastName: string;\n    // email: string;\n    // password: string;\n    // login: boolean;\n    updateToken: (newToken: string, id: any) => void;\n    // e: any;\n    setIsLoggedIn: (e:any) => void\n}\n\ninterface AuthState {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n    login: boolean;\n    sessionToken: string;\n    userId: string;\n    isLoggedIn: boolean;\n    clearToken: any;\n    updateToken: string;\n}\n\nclass Auth extends React.Component<AuthProp, AuthState> {\n    constructor(props: AuthProp) {\n        super(props)\n        this.state = {\n            firstName: '',\n            lastName: '',\n            email: '',\n            password: '',\n            login: false,\n            sessionToken: '',\n            updateToken: '',\n            userId: 'userId',\n            isLoggedIn: false,\n            clearToken: () => {\n                this.setState({\n                    isLoggedIn: false\n                })\n            }\n        }\n    }\n\n    loginToggle = () => {\n        this.setState({ login: !this.state.login })\n    }\n\n    updateToken = (newToken: any, id: any) => {\n        localStorage.setItem('id', id)\n        localStorage.setItem('token', newToken)\n        this.setState({ sessionToken: newToken, userId: id, isLoggedIn: true })\n    }\n\n    handleSubmit = (e: any) => {\n        e.preventDefault()\n        const url = `http://localhost:8081/user/${this.state.login ? 'login' : 'register'}`\n        const body = {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            email: this.state.email,\n            password: this.state.password\n        }\n        if (this.state.password.length > 8) {\n            fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(body)\n            }).then(r => r.json())\n                .then(rObj => {\n                    this.updateToken(rObj.sessionToken, rObj.user.id)\n                    this.props.setIsLoggedIn(true)\n                })\n                // this.setState({isLoggedIn:true})\n        } else {\n            window.alert(\"Password must be at least 8 characters\")\n        }\n    }\n\n\n    signupFields = () => {\n        if (this.state.login) {\n            return null\n        } else {\n            return (\n                <div>\n                    <label htmlFor=\"firstName\">First Name</label>\n                    <br />\n                    <input id=\"firstName\" value={this.state.firstName} onChange={e => this.setState({ firstName: e.target.value })} />\n                    <br />\n                    <label htmlFor=\"lastName\">Last Name</label>\n                    <br />\n                    <input id=\"lastName\" value={this.state.lastName} onChange={e => this.setState({ lastName: e.target.value })} />\n                </div>\n            )\n        }\n    }\n    render() {\n        return (\n            <div>\n                <form>\n                    <h1>{this.state.login ? 'Login' : 'Register'}</h1>\n                    <label htmlFor=\"email\">Email</label>\n                    <br />\n                    <input id=\"email\" value={this.state.email} onChange={e => this.setState({ email: e.target.value })} />\n                    <br />\n                    <label htmlFor=\"password\">Password</label>\n                    <br />\n                    <input type=\"password\" id=\"password\" value={this.state.password} onChange={e => this.setState({ password: e.target.value })} />\n                    <br />\n                    {this.signupFields()}\n                    <br />\n                    <Button type='button'\n                        onClick={this.loginToggle}\n                    >\n                        {this.state.login ? \"Click Here to Register\" : \"Click Here to Login\"}\n                    </Button>\n                    <Button onClick={(e: any) => this.handleSubmit(e)} type='submit'>Submit</Button>\n\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Auth;\n\n\n// const Auth = (props: any) => {\n\n//     const [firstName, setFirstName] = useState('')\n//     const [lastName, setLastName] = useState('')\n//     const [email, setEmail] = useState('')\n//     const [password, setPassword] = useState('')\n\n//     const [login, setLogin] = useState(true)\n\n//     const loginToggle = () => {\n//         setLogin(!login)\n//     }\n\n//     const handleSubmit = (e: any) => {\n//         e.preventDefault()\n//         const url = `http://localhost:8081/user/${login ? 'login' : 'register'}`\n//         const body = {\n//             firstName: firstName,\n//             lastName: lastName,\n//             email: email,\n//             password: password\n//         }\n//         if (password.length > 8) {\n//             fetch(url, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify(body)\n//             }).then(r => r.json())\n//                 .then(rObj => props.updateToken(rObj.sessionToken, rObj.user.id))\n//         } else {\n//             window.alert(\"Password must be at least 8 characters\")\n//         }\n//     }\n\n\n//     const signupFields = () => {\n//         if (login) {\n//             return null\n//         } else {\n//             return (\n//                 <div>\n//                     <label htmlFor=\"firstName\">First Name</label>\n//                     <br />\n//                     <input id=\"firstName\" value={firstName} onChange={e => setFirstName(e.target.value)} />\n//                     <br />\n//                     <label htmlFor=\"lastName\">Last Name</label>\n//                     <br />\n//                     <input id=\"lastName\" value={lastName} onChange={e => setLastName(e.target.value)} />\n//                 </div>\n//             )\n//         }\n//     }\n\n//     return (\n//         <form>\n//             <h1>{login ? 'Login' : 'Register'}</h1>\n//             <label htmlFor=\"email\">Email</label>\n//             <br />\n//             <input id=\"email\" value={email} onChange={e => setEmail(e.target.value)} />\n//             <br />\n//             <label htmlFor=\"password\">Password</label>\n//             <br />\n//             <input type=\"password\" id=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n//             <br />\n//             {signupFields()}\n//             <br />\n//             <Button type='button' onClick={loginToggle}>\n//                 {login ? \"Click Here to Register\" : \"Click Here to Login\"}\n//             </Button>\n//             <Button onClick={handleSubmit} type='submit'>Submit</Button>\n//         </form>\n//     )\n// }\n\n// export default Auth\n\n//reactstrap form?\n\n//login is not showing gift list based on id.","/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Edit.tsx",["66"],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Search.tsx",["67"],"import * as React from 'react';\nimport { Component } from 'react';\n\nexport interface SearchProps {\n    giftName?: string;\n}\n\nexport interface SearchState {\n    giftName?: string;\n    setGiftsName: []\n}\n\nclass Search extends React.Component<SearchProps, SearchState> {\n    constructor(props: SearchProps) {\n        super(props);\n        this.state = {\n            giftName: 'gift',\n            setGiftsName: []\n\n        };\n    }\n\n        fetchGiftsName = () => {\n            fetch(`http://localhost:8081/gifts/${this.props.giftName}`, {\n                method: 'GET'\n            }).then(r => r.json())\n                .then(rArr => {\n                    this.setState({\n                        setGiftsName: rArr\n                    })\n                    // console.log(this.state.setGifts)\n                })\n\n        }\n\n        componentDidMount() {\n            this.fetchGiftsName()\n        }\n        render() {\n            return (\n                <div>\n                    {this.props.giftName}\n                </div>\n            );\n        }\n    }\n\n    export default Search;",["68","69"],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Auth/LoginRegister/SignUpForm.tsx",["70"],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Items.tsx",[],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/List.tsx",["71","72","73","74","75","76","77","78","79","80"],"/Users/clairelane/Desktop/ElevenFifty Projects/JAVASCRIPTAUGUST2020/JavaScript-Library/Red Badge/red-badge/src/components/Gifts/Create.tsx",["81","82","83"],"import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { PassThrough } from 'stream';\nimport '../Gifts/create.css'\nimport GiftsList from './List';\n\ninterface GiftCreateProp {\n    giftName: string;\n    description: string;\n    date: string;\n    purchased: string;\n    person: string;\n    from: string;\n    owner: string;\n    price: string;\n    sessionToken: string;\n    showCreate: boolean;\n    setShowCreate: (e:any) => void;\n    fetchGifts: () => void;\n\n}\n\ninterface GiftCreateState {\n    giftName: string;\n    description: string;\n    date: string;\n    purchased: string;\n    person: string;\n    from: string;\n    owner: string;\n    price: string;\n    setGifts: [];\n    userId: string;\n    modal: boolean;\n}\n\nclass GiftsCreate extends React.Component<GiftCreateProp, GiftCreateState> {\n    constructor(props: GiftCreateProp) {\n        super(props)\n        this.state = {\n            giftName: '',\n            description: '',\n            date: '',\n            purchased: '',\n            person: '',\n            from: '',\n            owner: '',\n            price: '',\n            userId: '',\n            setGifts: [],\n            modal: false,\n        }\n        this.clearInput = this.clearInput.bind(this);\n\n    }\n\n    handleSubmit = () => {\n        const body = {\n            giftName: this.state.giftName,\n            description: this.state.description,\n            date: this.state.date,\n            purchased: this.state.purchased,\n            person: this.state.person,\n            from: this.state.from,\n            owner: this.state.owner,\n            price: this.state.price,\n        }\n        fetch('http://localhost:8081/gifts/create', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('token') || ''\n            },\n            // figure out how to get dynamic sessionToken\n            body: JSON.stringify(body)\n        }).then(r => r.json())\n            .then(rObj => {\n                console.log(rObj)\n                // this.resetForm()\n                // history.push('/')\n                this.props.fetchGifts()\n                this.props.setShowCreate(false)\n            })\n    }\n    //this is clearing input when button is, but values are remaining from last entry\n    clearInput() {\n        this.setState({ \n            giftName: '',\n            description: '',\n            date: '',\n            purchased: '',\n            person: '',\n            from: '',\n            owner: '',\n            price: ''\n        });\n    }\n\n    // componentDidMount() {\n    //     ontoggle = () => (!Modal)\n    // }\n    toggle = () => {\n        this.props.setShowCreate(false)\n       \n    }\n    handleChange = (e:any) => {\n        this.setState({\n            ...this.state,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    render() {\n        return (\n                <Modal isOpen={this.props.showCreate} toggle={this.toggle} >\n                    <ModalHeader>Create Gift</ModalHeader>\n                    <ModalBody>\n                        <form id='createGift' className='createGift'>\n                            <label htmlFor='giftName'>Gift Name: </label>\n                            <input name='giftName' placeholder='Ex: Necktie' id='giftName' value={this.state.giftName} onChange={e => this.handleChange(e)} required />\n                            <br />\n                            <label htmlFor='description'>Description: </label>\n                            <input name='description' placeholder='Write a brief description' id='description' value={this.state.description} onChange={e => this.handleChange(e)} />\n                            <br />\n                            <label htmlFor='date'>Date: </label>\n                            <input name='date' placeholder='Ex: 12/25/2020' id='date' value={this.state.date} onChange={e => this.handleChange(e)} required />\n                            <br />\n                            <label htmlFor='purchased'>Purchased: </label>\n                            <input name='purchased' placeholder='Where was this purchased?' id='purchased' value={this.state.purchased} onChange={e => this.handleChange(e)} />\n                            <br />\n                            <label htmlFor='person'>Person: </label>\n                            <input name='person' placeholder='Who was this for?' id='person' value={this.state.person} onChange={e => this.handleChange(e)}required />\n                            <br />\n                            <label htmlFor='from'>From: </label>\n                            <input name='from' placeholder='Who was this from?' id='from' value={this.state.from} onChange={e => this.handleChange(e)} required />\n                            <br />\n                            <label htmlFor='owner'>Owner: </label>\n                            <input name='owner' placeholder='Owner of List' id='owner' value={this.state.owner} onChange={e => this.handleChange(e)} required />\n                            <br />\n                            <label htmlFor='price'>Price: </label>\n                            <input name='price' placeholder='Ex: $200' id='price' value={this.state.price} onChange={e => this.handleChange(e)} required />\n                        </form>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button id='clearForm' onChange={e => this.handleChange(e)} onClick={this.clearInput}>Reset Gift Form</Button>\n                        <Button color='success' id=\"submitGift\" type=\"button\" onClick={this.handleSubmit}>Submit Gift!</Button>\n                    </ModalFooter>\n                </Modal>\n    \n        )\n    }\n    /* // return (\n    //     <div>\n            <form id='createGift' className='createGift'>\n                <label htmlFor='giftName'>Gift Name: </label>\n                <input placeholder='Ex: Necktie' id='giftName' value={this.giftName} onChange={e => this.state.giftName(e.target.value)} required />\n                <br />\n                <label htmlFor='description'>Description: </label>\n                <input placeholder='Write a brief description' id='description' value={description} onChange={e => setDescription(e.target.value)} />\n                <br />\n                <label htmlFor='date'>Date: </label>\n                <input placeholder='Ex: 12/25/2020' id='date' value={date} onChange={e => setDate(e.target.value)} required />\n                <br />\n                <label htmlFor='purchased'>Purchased: </label>\n                <input placeholder='Where was this purchased?' id='purchased' value={purchased} onChange={e => setPurchased(e.target.value)} />\n                <br />\n                <label htmlFor='person'>Person: </label>\n                <input placeholder='Who was this for?' id='person' value={person} onChange={e => setPerson(e.target.value)} required />\n                <br />\n                <label htmlFor='from'>From: </label>\n                <input placeholder='Who was this from?' id='from' value={from} onChange={e => setFrom(e.target.value)} required />\n                <br />\n                <label htmlFor='owner'>Owner: </label>\n                <input placeholder='Onwer of List' id='owner' value={owner} onChange={e => setOwner(e.target.value)} required />\n                <br />\n                <label htmlFor='price'>Price: </label>\n                <input placeholder='Ex: $200' id='price' value={price} onChange={e => setPrice(e.target.value)} required />\n    //             <br />\n    //             <Button color='secondary' style={{ marginLeft: '20px' }} id='resetForm' onClick={this.resetForm} type='button'>Reset Gift Form</Button>\n    //             <Button color='success' style={{ marginLeft: '15px' }} id=\"submitGift\" onClick={this.handleSubmit} type=\"submit\" >Submit Gift!</Button>\n    //             {/* <Alert color=\"success\">Gift submitted!</Alert> */\n    /* //         </form> */\n    /* //         <br />\n    //     </div > */\n\n\n}\n\nexport default GiftsCreate\n\n//make this a modal? \n//notes entry\n//alert when gift submitted?\n//styling for input fields.",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":7,"column":8,"nodeType":"90","messageId":"91","endLine":7,"endColumn":14},{"ruleId":"88","severity":1,"message":"92","line":8,"column":43,"nodeType":"90","messageId":"91","endLine":8,"endColumn":48},{"ruleId":"88","severity":1,"message":"93","line":8,"column":50,"nodeType":"90","messageId":"91","endLine":8,"endColumn":58},{"ruleId":"88","severity":1,"message":"94","line":9,"column":10,"nodeType":"90","messageId":"91","endLine":9,"endColumn":16},{"ruleId":"88","severity":1,"message":"95","line":11,"column":8,"nodeType":"90","messageId":"91","endLine":11,"endColumn":14},{"ruleId":"88","severity":1,"message":"96","line":12,"column":8,"nodeType":"90","messageId":"91","endLine":12,"endColumn":16},{"ruleId":"88","severity":1,"message":"93","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":18},{"ruleId":"88","severity":1,"message":"95","line":4,"column":8,"nodeType":"90","messageId":"91","endLine":4,"endColumn":14},{"ruleId":"88","severity":1,"message":"97","line":2,"column":18,"nodeType":"90","messageId":"91","endLine":2,"endColumn":30},{"ruleId":"88","severity":1,"message":"98","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":19},{"ruleId":"84","replacedBy":"99"},{"ruleId":"86","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":135,"column":21,"nodeType":"103","endLine":135,"endColumn":32},{"ruleId":"88","severity":1,"message":"104","line":19,"column":12,"nodeType":"90","messageId":"91","endLine":19,"endColumn":17},{"ruleId":"88","severity":1,"message":"105","line":20,"column":22,"nodeType":"90","messageId":"91","endLine":20,"endColumn":33},{"ruleId":"88","severity":1,"message":"106","line":21,"column":25,"nodeType":"90","messageId":"91","endLine":21,"endColumn":39},{"ruleId":"88","severity":1,"message":"107","line":22,"column":18,"nodeType":"90","messageId":"91","endLine":22,"endColumn":25},{"ruleId":"88","severity":1,"message":"108","line":23,"column":23,"nodeType":"90","messageId":"91","endLine":23,"endColumn":35},{"ruleId":"88","severity":1,"message":"109","line":24,"column":20,"nodeType":"90","messageId":"91","endLine":24,"endColumn":29},{"ruleId":"88","severity":1,"message":"110","line":25,"column":18,"nodeType":"90","messageId":"91","endLine":25,"endColumn":25},{"ruleId":"88","severity":1,"message":"111","line":26,"column":19,"nodeType":"90","messageId":"91","endLine":26,"endColumn":27},{"ruleId":"88","severity":1,"message":"112","line":27,"column":19,"nodeType":"90","messageId":"91","endLine":27,"endColumn":27},{"ruleId":"88","severity":1,"message":"113","line":28,"column":26,"nodeType":"90","messageId":"91","endLine":28,"endColumn":41},{"ruleId":"88","severity":1,"message":"114","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":20},{"ruleId":"88","severity":1,"message":"115","line":4,"column":10,"nodeType":"90","messageId":"91","endLine":4,"endColumn":21},{"ruleId":"88","severity":1,"message":"116","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":17},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"@typescript-eslint/no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Redirect' is defined but never used.","'Button' is defined but never used.","'Logout' is defined but never used.","'GiftEdit' is defined but never used.","'ButtonToggle' is defined but never used.","'Component' is defined but never used.",["117"],["118"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'gifts' is assigned a value but never used.","'setGiftName' is assigned a value but never used.","'setDescription' is assigned a value but never used.","'setDate' is assigned a value but never used.","'setPurchased' is assigned a value but never used.","'setPerson' is assigned a value but never used.","'setFrom' is assigned a value but never used.","'setOwner' is assigned a value but never used.","'setPrice' is assigned a value but never used.","'setSessionToken' is assigned a value but never used.","'useHistory' is defined but never used.","'PassThrough' is defined but never used.","'GiftsList' is defined but never used.","no-global-assign","no-unsafe-negation"]